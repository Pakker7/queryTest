-- 75 점보다 높은 점수를받은 학생의 이름을 쿼리합니다. 각 이름의 마지막 세 문자로 출력을 정렬하십시오. 두 명 이상의 학생 모두 이름이 마지막 세 문자 (예 : Bobby, Robby 등)로 끝나는 경우 ID를 오름차순으로 정렬합니다.
-- STUDENTS 테이블은 다음과 같이 설명됩니다. 이름 열에는 대문자 (A-Z)와 소문자 (a-z) 만 포함됩니다.

select Name
from STUDENTS
where Marks > 75
order by RIGHT(Name,3) , ID

-- Employee 테이블의 직원 이름 목록 (예 : name 속성)을 알파벳 순서로 인쇄하는 쿼리를 작성합니다. 입력 형식 회사의 직원 데이터가 포함 된 직원 테이블은 다음과 같이 설명됩니다.
-- 여기서 employee_id는 직원의 ID 번호, 이름은 이름, months는 회사에서 근무한 총 개월 수, salary는 월급입니다.

select name
from Employee
order by name

-- $2000 월급보다 월급이 많고 직원이 10 달 미만인 직원에 대해 직원 이름 목록 (즉, 이름 속성)을 인쇄하는 쿼리를 작성합니다. employee_id 오름차순으로 결과를 정렬합니다.
-- 여기서 employee_id는 직원의 ID 번호, 이름은 이름, months는 회사에서 일한 총 개월 수, salary는 월급입니다.

select name
from Employee 
where salary > 2000 and months < 10
order by employee_id

-- 학생, 친구, 패키지의 세 가지 테이블이 제공됩니다. 학생에는 ID와 이름이라는 두 개의 열이 있습니다. Friends에는 ID 및 Friend_ID (유일한 가장 친한 친구의 ID)의 두 열이 있습니다. 패키지에는 ID와 급여 (월 수천 달러로 제공되는 급여)라는 두 개의 열이 있습니다.
-- 가장 친한 친구가 자신보다 높은 급여를받은 학생의 이름을 출력하는 쿼리를 작성합니다. 이름은 가장 친한 친구에게 제공되는 급여 금액에 따라 정렬되어야합니다. 두 명의 학생이 같은 급여를받지 못함이 보장됩니다.

select s.name
from Students s
inner join Friends f on s.ID = f.ID
inner join Packages p1 on s.ID = p1.ID
inner join Packages p2 on f.Friend_ID = p2.ID
where p2.Salary> p1.Salary
order by p2.Salary

https://www.hackerrank.com/challenges/symmetric-pairs/problem 문제 이해가 안돼..
https://www.hackerrank.com/challenges/interviews/problem?h_r=next-challenge&h_v=zen&isFullScreen=true 너무 어려워..

https://www.hackerrank.com/challenges/sql-projects/problem?isFullScreen=true 푸는중
-- Task_ID, Start_Date 및 End_Date의 세 열이 포함 된 Projects 테이블이 제공됩니다. End_Date와 Start_Date의 차이는 테이블의 각 행에 대해 1 일과 같습니다.
-- 작업의 End_Date가 연속적이면 동일한 프로젝트의 일부입니다. Samantha는 완료된 다른 프로젝트의 총 수를 찾는 데 관심이 있습니다. 프로젝트를 완료하는 데 걸린 일수별로 나열된 프로젝트의 시작일과 종료일을 오름차순으로 출력하는 쿼리를 작성하세요. 완료일 수가 동일한 프로젝트가 두 개 이상있는 경우 프로젝트 시작일까지 주문하십시오.

select p1.Start_Date, p2.End_Date
from Projects p1
inner join Projects p2 on p1.End_Date = p2.Start_Date
order by End_Date desc, Start_Date desc



