-- 다음 두 가지 결과 집합을 생성합니다. 
-- 1. OCCUPATIONS에있는 모든 이름의 알파벳 순서 목록을 쿼리하고 바로 뒤에 각 직업의 첫 글자가 괄호로 표시됩니다 (즉 : 괄호로 묶여 있음). 예 : AnActorName (A), ADoctorName (D), AProfessorName (P) 및 ASingerName (S)
-- 2. OCCUPATIONS에서 각 직업의 발생 횟수를 쿼리합니다. 발생을 오름차순으로 정렬하고 다음 형식으로 출력합니다.
-- There are a total of [occupation_count] [occupation]s.
-- 여기서 [occupation_count]는 OCCUPATIONS에서 직업의 발생 횟수이고 [occupation]은 소문자 직업 이름입니다. 둘 이상의 Occupation에 동일한 [occupation_count]가있는 경우 알파벳순으로 정렬해야합니다.
-- 참고 : 각 직업 유형에 대해 표에 최소한 두 개의 항목이 있습니다.
-- sample output 
--Ashely(P)
--Christeen(P)
--Jane(A)
--Jenny(D)
--Julia(A)
--Ketty(P)
--Maria(A)
--Meera(S)
--Priya(S)
--Samantha(D)
--There are a total of 2 doctors.
--There are a total of 2 singers.
--There are a total of 3 actors.
--There are a total of 3 professors.

select a.* from (
    select concat(Name, '(',LEFT(Occupation,1), ')')
    from OCCUPATIONS
    order by 1
    limit 1000000 
) as a

union all

select b.* from (
    select concat('There are a total of ', count(*), ' ', Occupation,'s.')
    from OCCUPATIONS
    group by Occupation
    order by count(*), Occupation
) as b

이렇게 작성했는데 error가 났다.
union all 기준으로 첫번째 쿼리에 order by가 인식이 안되서 limit 1000000 을 추가 했는데 그것 때문인가 하고 해석을 확인해보니 정확한 답은 얻을수가 없었다. 뭐지..


-- 2D 평면에서 p1(a,b)와 p2(c,d) 두 점을 고려하십시오. 
-- a는 북위도의 최소값 (STATION의 LAT_N)과 같습니다. 
-- b는 서부 경도의 최소값 (STATION의 LONG_W)과 동일합니다. 
-- c는 북위도의 최대 값 (STATION의 LAT_N)과 같습니다. 
-- d는 서부 경도의 최대 값 (STATION의 LONG_W)과 같습니다. 
-- p1와 p2포인트 사이의 맨해튼 거리를 쿼리하고 소수점 이하 자릿수로 반올림합니다.
-- 여기서 LAT_N은 북위이고 LONG_W는 서경입니다.
-- 거리 구하는 법 p1 at (x1, y1) and p2 at (x2, y2), it is |x1 - x2| + |y1 - y2|.

select round(abs(min(LAT_N)-max(LAT_N)) + abs(min(LONG_W)-max(LONG_W)),4)
from STATION



-- 북위도 (LAT_N) (a,b)의 최소값과 최대값이 각각 STATION에서 서부 경도 (LONG_W) (c,d)의 최소값과 최대 값 인 2D 평면의 두 점 p1(a,c) and p2(b,d)을 고려하십시오. 
-- 점 사이의 유클리드 거리를 쿼리하고 답을 형식화하여 소수점 4자리를 표시합니다.
-- a,b = min(LAT_N), max(LAT_N), min(LONG_W), max(LONG_W)
SELECT
    ROUND(SQRT(
        POWER(MAX(LAT_N)  - MIN(LAT_N),  2)
      + POWER(MAX(LONG_W) - MIN(LONG_W), 2)
    ), 4)
FROM 
    STATION;
    
    
-- Amber의 대기업은 방금 몇 개의 새로운 회사를 인수했습니다. 각 회사는 다음 계층을 따릅니다.
-- 아래 테이블 스키마가 주어지면 company_code, 창립자 이름, 총 리드 관리자 수, 총 고위 관리자 수, 총 관리자 수 및 총 직원 수를 인쇄하는 쿼리를 작성하십시오. company_code 오름차순으로 출력을 정렬하십시오.
-- 참고 : 테이블에 중복 레코드가 포함될 수 있습니다. company_code는 문자열이므로 정렬은 숫자가 아니어야합니다. 예를 들어 company_codes가 C_1, C_2 및 C_10 인 경우 오름차순 company_codes는 C_1, C_10 및 C_2가됩니다.
-- 입력 형식 다음 테이블에는 회사 데이터가 포함되어 있습니다. 
-- company : company_code는 회사의 코드이고 founder는 회사의 설립자입니다.
-- Lead_Manager : lead_manager_code는 리드 매니저의 코드이고 company_code는 작업 회사의 코드입니다.
-- Senior_Manager : senior_manager_code는 수석 관리자의 코드, lead_manager_code는 수석 관리자의 코드, company_code는 근무 회사의 코드입니다.
-- manager: 관리자 : manager_code는 관리자의 코드, senior_manager_code는 선임 관리자의 코드, lead_manager_code는 수석 관리자의 코드, company_code는 작업 회사의 코드입니다.
-- Employee : employee_code는 직원의 코드, manager_code는 관리자의 코드, senior_manager_code는 선임 관리자의 코드, lead_manager_code는 수석 관리자의 코드, company_code는 근무 회사의 코드입니다.
https://www.hackerrank.com/challenges/the-company/problem?isFullScreen=true
            
                


